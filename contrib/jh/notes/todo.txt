PRIORITIES!!!!
==============
	
	* viewing a scene node and then connecting an input to it doesn't update
	* selection in the viewer, and expansion in the SceneEditor driving expansion of the procedural
		- do properly!

	* shaders with connections!

	* caching

* enable/disable plug for scene processors

* optimise PathListingWidget and paths
	- need hasChildren() and possibly fetchMore() and threading.

* allow SceneElementProcessors to not have filters if they don't want
	- AttributeCache for instance
		- although if it's not storing bounds then actually its fine

* proper scenePath class so we don't have to do loads of string manipulation
	- can it be combined with a C++ version of Gaffer.Path?
		- would that be confusing given the ScenePath class we already have
		  and which is intended for a different purpose?

* improved ui for arnold shaders
	- support gaffer.metadata?

* address removing copy() in TypedObjectPlug::setValue()
	- it offers a big speedup
	- do we need a noCopy flag?
	- or do we know that if we're in a compute() then we don't need a copy?
		- or some such

* i'm pretty sure we've got circular references in the menu code for CompoundEditor.

* do we have circular references between SplitContainer and its animation
	
* seeds derived from branchcreator
	- with make sure we don't do expensive bounds propagation !!!!!!!!

* look at giving child windows the Tool flag
	- keeps them on top even when non-modal
	- keeps them out of the system tray
	- makes color pickers crash on close

* setrendercamera node

* alembic camera converter

* opencolorio node

* fix CompoundVectorParameter ui

* tidy up scripting context
	- just a parent() method (or weak reference or whatever)
		- and no addChild() blah blah blah

* popupwindow overlays with any editor in them
	- come up on a keypress
	- allow them to be specified using the layout menu
	
* fix the camera movement
	
* fix script open directory location

* script node needs to save it's own plugs when serialising
	* a header would be nice too

* does plugSetSignal() get emitted even when the value is the same as before?
	
* Contexts need to have parents from which they inherit stuff

* stop camera moving all the bloody time
	- and fix the bloody controls

* make read and write and execute nodes accept time
	- write a scripting tutorial that makes read nodes for all file sequences in a directory

* how do we deal with exceptions in compute()
	- i think we turn them into error signals and return the plug default value
		- how does the ui know to reset the error state?
		- for now let's at least catch 'em in ValuePlug and just print 'em
			- but at least stop all the calling code from having to handle exceptions
	- need to consider threading
		- the errors will occur on compute threads
		- but we want to display them on the ui thread
		- i don't think any signals should be triggered by compute threads

* does CompoundPlug still need to derive from ValuePlug now?
	- maybe

* fix NodeSetEditor when node in locked set is deleted

* audit Node::affects() and CompoundPlugs in AffectedPlugsContainer
	- i believe this should be a shortcut for putting all the children in
		- but isn't
		- and needs documenting

* popup slider for NumericWidget
	- modifying the selected part of the number text

* image nodes
	- frame support for reader
	- ocio node

* install ops with sensible names

* explore image based layout tools

* config
	- user config in ~/gaffer needs to be versioned by major version
	
* scene nodes 
	- modelcachesource DONE
	- attributecache DONE
	- primitive variable delete DONE
		- do need to recompute bounds for some deletions though
	- geometry delete
	- primitive source or geometry source or summink DONE
	
	- hierarchy manipulators :
		- group DONE
			- with a transform DONE
				- using a Gaffer::TransformPlug DONE
			- with multiple inputs
		- rename
		- delete NEXT ?
		- merge
		- parent
		
	- instance NEXT !!!!
	- filter
	- transform
		- needs to update bounds at the levels above
	- attributes
		- add
			- gl rendering
			- renderman
		- delete
	- context manipulator
		- just passes through input, but shoves things into the context for the input evaluation
			- should combine nicely with the expression node
	- time warp / offset / woteva DONE
		- make the basic class generic somehow? just match "in*" to "out*"? DONE
			- yep, TimeWarp<SceneProcessor>, then match in to out. DONE
		- should this share a base class with context manipulator? YEP DONE
	- expression node
		- python DONE 
		- seexpr LATER
		- osl LATER
					
* documentation of the rules for compute()
	* and exception throwing for when the rules are broken
		- but not propagating exceptions out to the getValue() caller

* get Splines working again

* audit all functions returns Ptr - a lot of them should return *

* fix crashes caused by this code :

	frameRangePlug->addChild(
		new IntPlug(
			"start",
			Plug::In,
			1
		)
	);
	
		* i think this is because smart pointers to the child are being made and coming back to 0 before
		  return.
		  
* fullscreen button in top right

* it is most definitely not cool that we're not returning const & from Plug::getValue() any more
	- the reason being that we couldn't guarantee the lifetime when things were in the cache
	- a whole load of wasted allocations
	- could return const & for unconnected plugs?
	- or somehow keep the thing guaranteed alive for a bit?
	- or does that whole thing about the compiler being allowed to optimise return values like this
	  make it ok? http://cpp-next.com/archive/2009/08/want-speed-pass-by-value/
	  	- we should probably measure performance before we do anything

* audit wrappers for things
	- do we really want ScriptNode::typeId() to go into python? really?
		- because that is happening all the fricking time whenever we call ancestor<ScriptNode>

* make layout menu line up with button
	* Widget.bound() method
	* MenuButton?

* read and write nodes using context
	* maybe implemented in c++ too?
		* or should that wait until we have geometry and stuff working?
			* because then we'll want specialised ones that do streaming
	
* font weight for attribute editor labels
	
* decide how to register typeIds - namespace::name?
	- i wanted to rename GroupScenes to Group but couldn't due to duplicate typename registrations
		- namespacing everything would fix that