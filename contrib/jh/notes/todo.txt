* fix the camera movement
	
* PopupWidget

* fix script open directory location

* selection in the viewer, and expansion in the SceneEditor driving expansion of the procedural

* script node needs to save it's own plugs when serialising
	* a header would be nice too
	
* viewing a scene node and then connecting an input to it doesn't update

* Contexts need to have parents from which they inherit stuff

* stop camera moving all the bloody time
	- and fix the bloody controls

* how do we deal with exceptions in compute()
	- i think we turn them into error signals and return the plug default value
		- how does the ui know to reset the error state?
		- for now let's at least catch 'em in ValuePlug and just print 'em
			- but at least stop all the calling code from having to handle exceptions
	- need to consider threading
		- the errors will occur on compute threads
		- but we want to display them on the ui thread
		- i don't think any signals should be triggered by compute threads

* does CompoundPlug still need to derive from ValuePlug now?
	- maybe
		- how are we going to deal with not having to compute bound.min.x, bound.min.y etc individually?

* fix NodeSetEditor when node in locked set is deleted

* audit Node::affects() and CompoundPlugs in AffectedPlugsContainer
	- i believe this should be a shortcut for putting all the children in
		- but isn't
		- and needs documenting
	
* nodes 
	- modelcachesource DONE
	- attributecache DONE
	- primitive variable delete DONE
		- do need to recompute bounds for some deletions though
	- geometry delete
	- primitive source or geometry source or summink DONE
	
	- hierarchy manipulators :
		- group DONE
			- with a transform DONE
				- using a Gaffer::TransformPlug DONE
			- with multiple inputs
		- rename
		- delete NEXT ?
		- merge
		- parent
		
	- instance NEXT !!!!
	- filter
	- transform
		- needs to update bounds at the levels above
	- attributes
		- add
			- gl rendering
			- renderman
		- delete
	- context manipulator
		- just passes through input, but shoves things into the context for the input evaluation
			- should combine nicely with the expression node
	- time warp / offset / woteva DONE
		- make the basic class generic somehow? just match "in*" to "out*"? DONE
			- yep, TimeWarp<SceneProcessor>, then match in to out. DONE
		- should this share a base class with context manipulator? YEP DONE
	- expression node
		- python DONE 
		- seexpr LATER
		- osl LATER
		
* optimise setInput() for the case where the input is the same as before
			
* documentation of the rules for compute()
	* and exception throwing for when the rules are broken
		- but not propagating exceptions out to the getValue() caller

* get Splines working again

* audit all functions returns Ptr - a lot of them should return *

* fix crashes caused by this code :

	frameRangePlug->addChild(
		new IntPlug(
			"start",
			Plug::In,
			1
		)
	);
	
		* i think this is because smart pointers to the child are being made and coming back to 0 before
		  return.
		  
* fullscreen button in top right

* audit wrappers for things
	- do we really want ScriptNode::typeId() to go into python? really?
		- because that is happening all the fricking time whenever we call ancestor<ScriptNode>

* make layout menu line up with button
	* Widget.bound() method
	* MenuButton?

* fix the flickering widget on open
	- it's the menu bar

* read and write nodes using context
	* maybe implemented in c++ too?
		* or should that wait until we have geometry and stuff working?
			* because then we'll want specialised ones that do streaming
	
* font weight for attribute editor labels
	
* decide how to register typeIds - namespace::name?
	- i wanted to rename GroupScenes to Group but couldn't due to duplicate typename registrations
		- namespacing everything would fix that