* Added a GafferBindings::NodeClass class, which simplifies the binding of Node derived classes. It is now a one liner to bind a typical extension node.

* The op app now has an arguments parameter which can be used to specify the parameter values for the op.

* The op app now has a gui parameter. When this is true a gui is presented, when it is false the op is executed directly on the command line.

* Added the GafferScene and GafferSceneUI modules. These will allow the generation and editing of scene graphs.

* Fixed RunTimeTyped registration of Gaffer::CompoundPlug.

* Fixed behaviour when a Widget doesn't have a tooltip - it now correctly looks for tooltips on parent Widgets until one is found.

* Added a GafferUI.NumericSlider widget.

* The Viewer now correctly updates when the context has changed. The EditorWidget no longer calls _updateFromContext() at awkward times.

* Added a simple TimeEditor for manipulating the current frame.

* Fixed GIL problems caused by passing multithreaded python procedurals to RenderableGadget.

* Fixed GIL problems when emitting signals with python slots from a thread which does not currently hold the GIL.

* Added an ExpressionNode class.

* PlugValueWidgets now have setContext and getContext methods, and update correctly when the context changes if a plug has input connections.

* Added a Gaffer.TransformPlug class, for specifying transformations.

* Removed NodeUI.createPlugValueWidget() registeredWidgets only parameter.

* Added PathListingWidget setPathExpanded, getPathExpanded, setExpandedPaths, getExpandedPaths and expansionChangedSignal methods.

* Added the GafferImage and GafferImageUI modules, for tile based image processing.

* Removed deprecated StandardNodeGadget::acceptsNodule() method, and associated StandardNodeGadget( node, deferNoduleCreation ) constructor. Nodule creation should now be controlled entirely by the Nodule factory mechanism.

* The Application base class now automatically creates an ApplicationRoot and makes it available via the root() method. Derived classes should use this rather than create their own. The Application base class now also makes sure that all startup files have been executed before the application is run, so derived classes may not now call _executeStartupFiles themselves (it is now protected). Additionally the doRun() method has
been renamed to _run, to be more in keeping with general python philosophy.

* The WeakMethod class now throws a more useful exception when called on expired instances.