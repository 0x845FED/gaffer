* Added GafferUI.NotificationMessageHandler, for displaying IECore messages in a little window.

* Added a ParameterHandler and ParameterValueWidget for DateTimeParameters.

* VectorDataWidget size behaviour now works much better for large amounts of data. It is now possible to use the browser's FileIndexedIO preview tab to view large amounts of data
from .cob and .fio files.

* Fixed bug in VectorDataWidget, whereby the vertical header would disappear when rows were deleted.

0.31.0
------

* Fixed getText method of Label widget.

* TextInputDialogue now has all text in the textfield selected by default.

* Fixed "RuntimeError: underlying C/C++ object has been deleted" error triggered by removing a panel from a ScriptWindow.

* Fixed bug which meant that removing a panel would only keep a single subpanel of the panel that remained.

* Fixed bug which meant that sometimes the remaining layout buttons would cease to work after removing a panel from the CompoundEditor.

* PathListingWidget now has a displayModeChangedSignal() method.

* Added PathChooserWidget setPath() and getPath() methods.

* Added customisable modes to the BrowserEditor. Current modes allow the browsing of either files or ops.

* Added Gaffer.SequencePath class and used it to implement a file sequence browsing mode for the BrowserEditor and a FileSequenceParameterValueWidget.

* Added PathListingWidget setColumns() and getColumns() methods.

* Added a Gaffer.OpMatcher class, to provide lists of ops which are suitable for application to particular objects.

* Added a contextMenuSignal() to the Widget class.

* Added a right click menu to the BrowserEditor, allowing suitable ops to be applied to
files and file sequences.

0.30.0
------
* Fixed problem trying to call QLineEdit.setPlaceholderText within Nuke.

* Gaffer.BlockedConnection now supports reentrancy, with the connection only becoming unblocked when the outermost block has been exited.

* Fixed bug which prevented selection using the up/down cursor keys from working in the PathChooserWidget.

* Merged optimised Gadget drawing code from optimisedGadgetDrawing branch - drawing of the graph should now be much quicker.

* ImageGadgets now have a linear to srgb conversion applied when they are drawn. This means they now match the Image widget behaviour.

* PathChooserWidget and PathChooserDialogue now accept a new allowMultipleSelection argument to the constructor. Use the new PathChooserDialogue.waitForPaths() method to wait for paths selected in this way.

* VectorDataWidget has a new protected _createRows() method which may be overridden by derived classes to customise the addition of new rows. The PathVectorDataWidget implements this by displaying a dialogue where the user may select multiple paths to be added. This improves the parameter ui for PathVectorParameters.

0.29.0
------

* The Gaffer.BlockedConnection constructor now accepts a list of connections to block, as an alternative to just a single connection.

* Added a Gaffer.LeafPathFilter class, which filters out leaf Paths.

* Fixed problem with Dialogue.waitForButton() which meant that the keyboard focus would be in the wrong place if a parent window was provided.

* PathListingWidget now supports user resizing of the columns. The existing automatic resizing behaviour remains, but any changes made by the user are remembered and applied as offsets to future automatic resize events.

* PathListingWidget.Column.lessThanFunction has been replaced with PathListingWidget.Column.sortFunction. The former was a function to compare two items, whereas the latter now simply returns the data in a form that should be passed to a standard less than comparison.

* Added PathListingWidget.selectionChangedSignal().

* Added PathListingWidget.scrollToPath() method.

* PathListingWidget now supports a tree view mode in addition to the existing list mode. This is exposed in the PathChooserWidget and PathChooserDialogue via a button to toggle between the modes.

* Deprecated PathListingWidget.selectedPaths() and introduced a pair of getSelectedPaths()/setSelectedPaths() methods.

* Added the ability to remove children from the TabbedContainer using del[start:end] notation.

* Added GafferUI.EventLoop.executeOnUIThread().

* Added Gaffer.DictPath, to allow browsing of dictionaries, IECore.CompoundData and IECore.CompoundObjects using the GafferUI Path components.

* Added GafferUI.BusyWidget, for saying "i might be some time but i don't really know how long so just twiddle your thumbs please".

* Fixed bug in GafferUI.Frame.removeChild.

* PathListingWidget now copes if a field in the Path.info() is missing.

* Added a Gaffer.IndexedIOPath class, to allow browsing inside Cortex files using the GafferUI Path components.

* GafferUI.EventLoop in Houdini mode now pumps 5 times rather than once per hou.ui.eventLoop idle. This makes typing in text fields interactive.

* GafferUI.TabbedContainer now has setTabsVisible() and getTabsVisible() methods.

* Added a frame() method to GafferUI.GadgetWidget, to frame a particular bounding box in the viewport, and fixed a bug whereby setGadget() didn't request a redraw.

* Added setPath and getPath methods to PathListingWidget, and PathWidget.

* Added setPathCollapsed and getPathCollapsed to PathListingWidget to allow programmatic control of the tree view.

* Added Gaffer.ClassLoaderPath class to allow browsing of ops and suchlike.

* GafferUI.SplitContainer.setSizes() can now be called before the SplitContainer has become visible.

* Added GafferUI.ErrorDialogue.ExceptionHandler class to simplify error handling.

* Added classes for previewing paths. General file information, headers, images, meshes, ops, and indexed io files and contents may all be previewed.

* Added a BrowserEditor class for embedding a file browser into a Gaffer layout.

* Added a browser app to browse the filesystem and display previews.

* Renamed ScriptNode::application() method to ScriptNode::applicationRoot() and changed return type to a raw pointer in keeping with the rest of Gaffer. Added python binding.

* Added ApplicationRoot::preferencesLocation() method to return an appropriate directory into which settings can be saved.

* Added Widget.visibilityChangedSignal().

* Fixed crash in python bindings for TypedObjectPlug::defaultValue, for the case of the default value being null.

* TypedObjectPlug bindings now support the serialisation of the value and default value, provided that the bindings for the types they hold implement __repr__ appropriately.

* Fixed bug in GafferBindings::Serialiser which meant that serialisers were called twice unecessarily.

0.28.1
------

* Changed the default resize mode of OpDialogue/ErrorDialogue to be manual

* Removed assert warning

* Fixed juddering resize events when opening the OpDialogue, by optimising out unecessary calls in Widget.setVisible().

0.28.0
------
* Added an InfoPathFilter, which allows filtering with an arbitrary match function applied to an arbitrary field of Path.info(). Used this to implement a filter text box for path choosers.

* GridContainer now supports the automatic parenting mechanism

* Window now support the addition of child windows using the automatic parenting mechanism.

* Keyword arguments can now be passed to the ContainerWidget.addChild() call generated by the automatic parenting mechanism. To properly support this, all Widget subclasses must take a **kw constructor argument, and pass it to their parent class constructor. An example use follows :

	with GafferUI.GridContainer() :
		# index is automatically passed to GridContainer.addChild() to specify the position of the button
		GafferUI.Button( "myButton", index = ( 0, 2 ) )

	with GafferUI.ListContainer() :
		# expand is automatically passed to ListContainer.addChild()
		GafferUI.Spacer( IECore.V2i( 10 ), expand=True )

* Added the ability to easily profile any gaffer application using the cPython profiling module, by specifying the -profileFileName command line flag. Use the pstats module to examine the resulting file.

* Optimised the Widget event filter.

* Fixed circular reference in GafferUI.CompoundParameterValueWidget which could cause "Underlying C/C++ object has been deleted" errors.

* The displayFunction in GafferUI.PathListingWidget.Columns may now return a GafferUI.Image or (as an optimisation) a QtGui.QIcon.

* Added GafferUI.PathListingWidget.defaultFileSystemIconColumn, which can be added to the list of columns passed to GafferUI.PathListingWidget to obtain an icon view.

* Optimised Widget implementation so that the event filter is only applied when it is absolutely needed - either when a connection to one of the signals has been made or when getToolTip has been overridden. Investigations with the standard gaffer ui revealed that only about one third of widgets meet these criteria.

* Optimised Widget implementation by lazily constructing signals when they are first accessed. This improves construction times but also reduces the memory footprint of a freshly constructed Widget by 40%.

* Added Gaffer.lazyImport function, which imports modules in such a way that they aren't actually loaded until first accessed.

* Optimised startup of gaffer applications which don't use any GL functionality, by using the new Gaffer.lazyImport functionality for PyOpenGL, IECoreGL and QtOpenGL.

* Added buttonDoubleClickSignal() to GafferUI.Widget and GafferUI.Gadget.

* Added setSelection() and getSelection() methods to GafferUI.TextWidget, along with a selectionChangedSignal() method. An additional selectingFinishedSignal() uses heuristics to determine when the user has finished making a selection. This is useful in Widgets which wish to provide easy methods of acting on the selection.

* The Menu.popup() method now takes optional position and forcePosition arguments.

* Improved PathWidget popup listing behaviour.

* GafferUI.ScrolledContainer now always asks for enough size to completely show its contents, regardless of the scroll mode in use.

* Deprecated GafferUI.Window setResizeable() and getResizeable() methods in favour of new setSizeMode() and getSizeMode() methods. These provide three modes - Manual (the same as the previous resizeable), Fixed (the same as the previous non-resizeable) and Automatic, whereby the window always tries to fit its child. Added a resizeToFitChild() method for cases where sizeMode is not Automatic and you know the child has been resized.

* The OpDialogue now resizes automatically to fit the parameters initially, and adjust as parameter sections are shown and hidden.

* The Widget class now has a keyReleaseSignal, and the GadgetWidget propagates events on this signal to the existing Gadget::keyReleaseSignal.

* Added support for "label" attributes in menu definitions to GafferUI.Menu. This is really just a workaround for the fact that IECore.MenuDefinition uses / characters to delineate between menu entries, and sometimes we want a / in the entry name itself.

* The VectorDataWidget now sizes itself to fit its contents.

0.27.0
------

* Keeping the same font dpi no matter where gaffer is running.

* Fixed bug which caused NameError to be thrown when loading a script containing an OpHolder.

* NodeUI widgets can now be customised on a per-plug basis using the NodeUI.registerPlugValueWidget call.

* Fixed bug which could cause crashes if a plug managed by VectorTypedParameterHandler had a null value.

* Fixed bug which caused additional parameters1, parameters2 etc plugs to be created on the ReadNode. Added an additional test to check that the ReadNode works following serialisation.

* Implemented keys(), values(), items() and __getitem__( long ) for GraphComponent bindings.

* Added a simple Write node.

* Added an execute application which can be used to execute Write nodes, or any other node with an execute() method.

* The Gaffer headers are now installed in the include directory in the Gaffer distribution.

* The Cortex procedural stubs are now installed as part of the Gaffer distribution.

* GafferUI.TabbedContainer now has an index() method for retrieving the index of a given child, and a currentChangedSignal() method for signalling when the current tab has been changed.

* GafferUI.NodeSetEditor now has a nodeSetChangedSignal() method, to notify listeners when the node set the editor is using has changed.

* GafferUI.CompoundEditor now houses a couple of useful buttons alongside the tabs in the layout. One brings up the menu to edit the layout, and the other locks the currently viewed nodes for the current editor.

* Added Serialisable flag to Gaffer.Plug, to control whether or not plugs and their values are serialised.

* The gui app now has a fullScreen command line flag.

* NodeEditor now displays the node type.

* The Plug base class may now be serialised.

* Fixed bug which meant that plug flags were not correctly serialised.

* Fixed bug in the automatic Widget parenting mechanism, which meant Widgets could be parented inappropriately when being created from the constructor of another Widget.

* The Path.addFilter() and Path.removeFilter() methods have been deprecated and replaced with Path.setFilter() and Path.getFilter() methods. Use the new CompoundFilter class if you wish to use more than one filter.

* The Path and FileSystemPath constructors now accept an optional filter argument.

* The PathFilter class now has setEnabled() and getEnabled() methods to turn the filter on and off. Derived classes should now implement the _filter() method rather than the filter() method.

* The PathFilter class now has a changedSignal(), which issues notifications when the filter is changed in some way. The Path class uses this to correctly trigger its own pathChangedSignal()

* The PathFilter classes now accept a dictionary userData argument to the constructor, which can be used for storing arbitrary data with the filter.

* The CheckBox class now has setText() and getText() accessors.

* Added PathFilterWidget class to allow uis to be built for the filters on paths. Added filter ui to PathChooserWidget, along with a button to refresh the listing. 

* The Path class now adds "name" and "fullName" entries to the info() dictionary.

* The Menu class now accepts booleans as well as callables for the checkBox MenuItemDefinition entry.

* PathParameterWidget now applies path filters, and has an _filter() method which can be overridden in derived classes to define the filter.

0.26.0
------

* Gaffer.Application._executeStartupFiles() now takes an optional contextDict to allow variables to be passed to the startup scripts.

* GafferBindings.Serialiser now has a public constructor and can be used directly. It still needs some refactoring.

* Gaffer.ApplicationRoot now has a preferences() method which returns a node used to represent preferences. It also has a savePreferences() method to save the user preferences into a startup script. The GafferUI.ApplicationMenu
provides access to this via a menu item.

* Default stylesheet now does a better job of aligning the corner widget for the TabbedContainer.

0.25.0
------

* Changed in NumericPlugValueWidget the methods __keypress and __textChanged to be protected

* Added alternate color as new entry in widget style sheet

* The GafferUI.Image class now uses a more sensible cache size to eliminate thrashing when loading images from disk. The cache size defaults to 100 MB but can be specified directly using the GAFFERUI_IMAGECACHE_MEMORY environment variable, which is also interpreted as being a number in MB.

0.24.0
------

* ParameterisedHolder now correctly loads an instance of the held class
following serialisation.

* ParameterisedHolder::setParameterised() and OpHolder::setOp() now accept
an optional keepExistingValues parameter which defaults to false. Passing
true preserves existing plug values in preference to the values in the
incoming Parameterised object.

* TabbedContainer now allows the addition of a custom Widget to the top
right corner using the setCornerWidget() and getCornerWidget() methods.

* Fixed a bug which meant that the ButtonEvent::line field was incorrectly
transformed when delivering events to Gadgets.

* Fixed tab sizing issue on OS X.

* Fixed crashes in ObjectParameterHandler triggered by plugs with null values.

* Added enterSignal(), leaveSignal(), dragEnterSignal() and dragLeaveSignal() methods to Gadget. Nodules now highlight themselves when entered using this
new functionality.

* Fixed GafferUI to work with qt 4.6 as well as 4.7.

* Gaffer can now be run embedded in Nuke.

0.23.0
------

* Fixed a bug which prevented keypresses in GadgetWidget from being propagated to the parent widget if they were not processed by the GadgetWidget.

* Can now exit full screen mode by hitting Escape.

* OpDialogue.waitForResult() now never returns Exceptions if execution fails. Instead it gives the user the chance to try again or cancel.

* CompoundParameterValueWidget and CompoundVectorParameterValueWidget now support the ["UI"]["collapsible"] and ["UI"]["collapsed"] parameter userData. The collapsible argument to the constructor now defaults to None, it can be specified explicitly as True or False to override the userData request.

* Fixed a bug which prevented the GafferUI.Widget owner for empty QTabWidgets from being found with PyQt4. This caused errors during event handling.

* The Widget.setVisible() and Widget.getVisible() methods have been modified to match the behaviour of Widget.setEnabled() and Widget.getEnabled(), and an addition Widget.visible() method has been introduced to query visibility relative to an ancestor. See documentation for further details.

* Added SplitContainer getSizes(), setSizes() and handle() methods. See documentation for details.

* ListContainer.__init__() orientation parameter now defaults to vertical.

* CompoundEditor now provides dynamic behaviour for expanding and collapsing child editors. Hit space to expand the current editor one level, double space for two levels and so on. Space then collapses back one level, double space two levels and so on. When an editor is fully collapsed, hovering over the splitter handle will dynamically show it.

0.22.1
------

* Changed events keyPress and textChanged to be protected

0.22.0
------

* Collapsible Widget now supports corner widget expanded

* Changed Error Window to be resizable as default

* Added selectedSignal in SelectionMenu

* Added CurrentIndexChangedSignal test in SelectionMenuTest

* Fixed StringParameterValueWidget to create a PlugValueWidget using the registered Type

* Added enterSignal and leaveSignal in Widget


0.21.0
------

* Added a selectionMenu widget.

* Stylesheet restructured, enabling style overrides in widgets.

* Improved stylesheet performance applying styles only in Window and Menu widgets.

* Buttons can optionally have the frame removed using the setHasFrame() method or the hasFrame argument to the constructor. Additionally they no longer have minimum sizes defined by the stylesheet.

* Minor style changes.

* Disabled Qt's automatic merging of menubars with the OS X system menu. This was causing crashes and wasn't compatible with fullscreen mode either.

* Added a simple ProgressBar widget.

* Removing a node from a parent using removeChild() now automatically disconnects the node from the graph. Fixes issue #38.

* Fixed a number of test failures which occurred only in the Image Engine build, due to the fact that we install the cortex ops with different version numbers than a standard install.

* CompoundParameterValueWidget now updates the ui appropriately when plugs are added and removed. This can be seen in the Read node when switching between different file types.

* File menu items now open file browsers in a more sensible location.

* File browser now has a button to go up one directory level.

* Containers may now be used in the python with statement to make the creation of nested layouts more straightforward. For example :

	with GafferUI.Collapsible() :	
		with GafferUI.ScrolledContainer() :
			with GafferUI.ListContainer( GafferUI.ListContainer.Orientation.Vertical ) :
				GafferUI.TextWidget( "Making uis is easier now" )
				GafferUI.Button()

* Nodule::registerNodule now accepts regular expressions for plug names.

* StandardNodeGadget::acceptsNodule is deprecated. Use Nodule::registerNodule in preference. Default implementation of StandardNodeGadget::acceptsNodule now always returns true.

* Graph editor ui for ParameterisedHolders now only shows connections for ObjectPlugs, this prevents the interface being cluttered with connections for all the other parameter types.

* Viewer is no longer hardcoded to display the result of the "output" plug - it now displays the result of the first output ObjectPlug. This allows it to view the results of procedurals and ops.

* The node creation menus for Ops and Procedurals now create OpHolder and ProceduralHolder nodes rather than generic ParameterisedHolder nodes. Ops and procedurals may now be run in Gaffer.
			
0.20.0
------

* GafferUI.EventLoop supports Houdini using hou.ui.addEventLoopCallback

* Support for boost 1.37.0

* Using future to import with_statement for python 2.5 compatibility

0.19.0
------

* Added a BoolVectorDataPlug and a BoolVectorDataParameterHandler.

* GafferUI._Variant.fromVariant() now supports booleans.

* VectorDataWidget now accepts a list of VectorData objects to the constructor and in setData(). This allows larger tables to be constructed consisting of columns from several VectorData objects. As a result VectorData.getData() always returns a list of objects, even when operating on only a single object. VectorDataWidget now accepts custom header labels specified by passing a list of strings to the header parameter in the constructor.

* Using an officially allocated TypeId range, and not one that might conflict with internal projects.

* CompoundValueParameterWidget can now be usefully subclassed, and the _buildChildParameterUIs method reimplemented to change behaviour.

* Added a CompoundVectorParameterValueWidget.

* Fixed a bug in GafferUI.Menu which prevented dynamically generated submenus from displaying correctly.

* Plugs representing parameters are now correctly identified as being dynamic, and can therefore be saved and loaded to scripts. Custom ParameterHandler classes should now call setupPlugFlags() in their setupPlug() implementation to support this behaviour.

* Added OpHolder and ProceduralHolder node types. The ui still needs work to make these useable.

* Fixed problem which caused artifacts in GafferUI.Images when using PySide.

* Reduced default font size to fit more on screen.

* Fixed problem with GafferUI.Button positioning on OS X.

0.18.0
------

* Renamed ArrayNodule to CompoundNodule.

* Bug fix for PathListingWidget with allowMultipleSelection==True. When selecting more than one item, the path being edited is now always set the current directory. This avoids problems where setting the path to the last selected leaf could cause the current selection to be destroyed.

0.17.0
------

* Fixed a bug in NumericPlug::setValue() which meant it was possible to set value outside the Plug's min/max range.

* Changed ParameterHandler interface to allow the same ParameterHandler instance to be used repeatedly even when Parameters are being added and remove or are changing type. This should be more efficient but more importantly will be necessary to allow the CompoundParameterValueWidget to adjust the ui when Parameters are edited in this way. The following changes need to be made to a ParameterHandler implementation :

	* Remove the plugParent argument to the constructor, and move the plug creation code to an implementation of the new setupPlug() pure virtual function.
	* Stop passing the parameter to the base class constructor, but instead store it as a member variable, and implement the pure virtual parameter() method to return it.

See python/GafferTest/ParameterHandlerTest.py for an example.

* The path argument to the PathPlugValueWidget is now optional, with a FileSystemPath being used if no path is specified.

* ValuePlug now emits plugSetSignal() before calling Node::dirty(), rather than vice versa.

* The ReadNode now exposes the parameters of the IECore::Readers it uses as plugs on the node.

* The PathListingWidget contents can now be customised by passing a column specification to the constructor. See PathListingWidget.defaultFileSystemColumns for an example. Also added support for sorting the listing by clicking on the headers, and allowed the column specification to provide a sorting function to be used in this case.

* The PathListingWidget now allows multiple selection of files using the allowMultipleSelection argument to the constructor, and provides a list of the currently selected paths using the selectedPaths() method.

* Implemented the ParameterisedHolder::setParameterised( className, classVersion, searchPathEnvVar ) overload. Still needs some work so nodes can be serialised to a script and reloaded properly.

* Fixed a bug in the Node bindings which meant that the C++ base class implementations weren't called when a python class didn't provide overrides.

* ParameterHandler::setupPlug now takes an argument specifying the plug direction required.

* Added an ObjectParameterHandler.

* Added Widget setEnabled(), getEnabled() and enabled( relativeTo ) methods - see documentation for details. Signals are not emitted for Widgets which have been disabled.

* Fixed a bug in the RunTimeTyped registration for TypedPlug.

0.16.0
------

* Added a StandardNodeGadget::acceptsNodule() method which may be reimplemented by derived classes to control exactly which plugs are represented by the gadget. See GafferUITest.StandardNodeGadgetTest.testSubclassing() for an example.

* GafferUI.StringPlugValueWidget now exposes the internal TextWidget with a textWidget() method.

* GafferUI.TextWidget now supports password style text display, settable with the displayMode constructor parameter, or the setDisplayMode() method.

* New StringParameterValueWidget supports ["UI"]["password"] parameter userData.

* The appearance of disabled buttons is now less confusing.

0.15.1
------

* Fixed layout problems caused by adding larger items into existing rows of a GridLayout.

0.15.0
------

* Added a GridContainer class.

* Fixed bug which meant that connections were temporarily offset from their endpoint if a nodule was added to a node immediately after them being made (as the Group node does).

* Fixed bugs in the GroupNode which meant that compute() was called each time the node was moved in the GraphEditor, and that compute() could error if an input plug contained None.

* Gaffer can now be run embedded in maya versions which use Qt natively.

0.14.0
------

* The parameter userData ["UI"]["visible"] is now supported.

* Fixed failing test GafferTest.ParameterisedHolderTest.testAddAndRemoveParameters. Parameters may now be added or removed within a ParameterisedHolder::ParameterModificationContext.

* Fixed a few stylesheet issues that appeared when running under Gnome.

* Added a GraphComponent::setChild() method - this operates in the same way as the __setitem__ python method. See documentation for the distinction between addChild() and setChild().

* Fixed a bug whereby GraphComponent::getChild( "" ) would return the GraphComponent itself rather than nothing.

* Fixed a bug dealing with parameters changing type within a ParameterisedHolder::ParameterModificationContext.

* GraphComponent::parentChangedSignal() now also provides the previous parent to connected slots in addition to the child argument.

* Fixed a bug where transferring a child from one parent to another would emit parentChangedSignal() twice, once with the child unparented from the old parent, and once with the child reparented to the new parent. Now the signal is only emitted once, omitting the bogus temporary unparenting signal.

* Plugs now automatically disconnect their inputs and outputs when they are removed from their parent.

* Plugs may no longer implement acceptsInput( 0 ) to return false - this was illogical as it prevents the undoing of a connection made by the user.

0.13.0
------

* Fixed a bug whereby a node would be offset from the mouse position when dragging if starting the drag was delayed while other uis (particularly the NodeEditor) were updating.

* Fixed a bug which meant that connections were not correctly represented in the GraphEditor for children of the ArrayNodule.

* The ParameterHandler classes now correctly define the Ptr and ConstPtr member typedefs required for all IECore::RefCounted subclasses.

* The ParameterHandler classes now have a plug() method which returns the plug which was created to represent the parameter().

* The ParameterisedHolder class now exposes the internal ParameterHandler with a parameterHandler() method.

* The CompoundParameterHandler class now provides access to the handlers it uses for child parameters using the childParameterHandler() method.

* The CompoundParameterHandler now has python bindings.

* The Image widget no longer expands to fill space if it is available.

* The Label widget now has setText() and getText() methods.

* The PathWidget class now has a path() method returning the path being displayed.

* The Window.addChildWindow( window ) call now results in the parent window holding a reference to the python object representing the child. This avoids situations whereby the child python object would die but the QWidget representing the child on the C++ side would continue to live. Use Window.removeChild() to remove a child window when you wish to destroy it, or use setVisible( False ) to hide the child until you need it again.

* Fixed bug in PathWidget which meant that the path display would be incorrect until the path changed for the first time.

* PathListingWidget fixes :

	* Error when double clicking an item.
	* Selection was not being cleared when the current path wasn't valid.
	* Path wasn't being set when a leaf item was selected, which meant that hitting Enter in the PathChooserDialogue chose the wrong path.
	* Double clicking a directory when the current path wasn't valid created another invalid path, rather than replacing the invalid section.	

* Added a "python" application which simply executes a python file in the Gaffer environment.

* Added a GafferUI._Variant class which has helper function for dealing with differences in PySide and PyQt4 with respect to QVariant handling.

* Fixed VectorDataWidget to work with PySide.

* Added a BoxParameterHandler covering Box2i, Box2f, Box3i and Box3f parameter types.

* GraphComponent now supports the len() function in python, returning the number of children for the instance. The __nonzero__ method is also implemented so that queries of the type "if graphComponent : " will return True as before, even if there are no children.

* The sizing behaviour of the PathListingWidget is no longer quite as annoying.

* GafferUI.Menu now optionally passes a "menu" argument to the checkBox callback of a menu item, in the same way as it does for the command callback.

* Fixed bug in GafferUI.ColorSwatch.getColor().

* Added Window.[gs]etFullScreen() methods, and added a menu item to the Layout menu to use them. Added a parentWindow argument to the Dialogue*.waitFor*() methods, and used it appropriately to keep dialogues on top even when in full screen mode.

* The Image class now uses the Cortex PNGImageReader for loading png files, and correctly converts linear data to sRGB for display.

* Added a basic framework for parameter-specific uis. Initially there are only specific uis for compound parameters, presets only parameters and path parameters - all others fall back to using the default plug widgets. A UI may be easily instantiated for all the parameters of a ParameterisedHolderNode using the GafferUI.CompoundParameterValueWidget - see GafferUI.ParameterisedHolderNodeUI for an example.

* The MultiLineTextWidget now has much more sensible tab spacing.

* The Collapsible container can now display an optional widget in the top right corner of the header. Use the setCornerWidget() and getCornerWidget() methods to manipulate this widget.

* Removed font parameter from GafferUI.Label - it wasn't doing anything anyway. Font control will likely return in the form of some support for text markup.

* Fixed variable scope issues which meant that the following code would fail if executed in a script editor :

		class A() :

			def __init__( self ) :

				print A

		a = A()

0.12.0
------

* Added a VectorDataWidget and a VectorDataPlugValueWidget, handling plugs of type StringVectorPlug, IntVectorPlug, FloatVectorPlug and V3fVectorPlug. Still needs file selector support.

* Added a V3fVectorDataPlug and a V3fVectorDataParameter handler.

* All gaffer applications now include a call to IECore.registerRunTimeTyped.

* Fixed bug which would cause the base class doRender() method to be called in addition to the overridden one when subclassing from Gadget in python.

* Plug::setInput() now calls acceptsInput() even when the new input is null. This allows plugs to reject the removal of existing connections. The connection gadget has been updated to respect the new rejection possibility, preventing the dragging of the destination end of a connection to a plug whose acceptsInput( 0 ) returns false, and not attempting to set the input if the source end of source a connection is dragged off into space. Currently no Gaffer plug type returns false from acceptsInput( 0 ), but custom plugs are free to do so and Gaffer plugs may return false in the future based on the content of a ReadOnly or Locked flag on the plug.

* Window constructor now accepts an additional "child" keyword argument which is passed to a call to setChild().

* Fixed problem whereby the hover colour for the SplitContainer handles wouldn't work on all platforms.

* The GraphEditor now provides access to its internal GraphGadget with the graphGadget() method.

* Refactored the Set class into an abstract base class and a StandardSet class containing the previous functionality. The members() and sequencedMembers() methods have been removed as they didn't generalise well to other potential Set subclasses (such as a NameFilteredSet). Instead a new member( i ) method provides ordered access and the contains( member ) method provides membership queries.

* Added a ChildSet class whose membership tracks the children of a given GraphComponent.

* Added python bindings for Nodule::plug and Connection::srcNodule() and Connection::dstNodule().

* Added CompoundEditor.editors() method, which returns all the child editors, optionally filtered by type.

* GraphGadget can now show arbitrary Sets of nodes, specified using the GraphGadget::setGraphSet() method.

* GafferBindings::SignalBinder now supports signals of arity 0.

* GafferBindings::SignalBinder now returns the class that was bound, so that additional method bindings may be added by calling code.

* A generic set of python signals are now bound as Signal0, Signal1, Signal2 and Signal3, where the number denotes the number of arguments the Signal takes. Python callables may be used to provide custom result combiners - see GafferTest.SignalsTest for examples.

* The GraphEditor now allows custom right click menus to be displayed for nodes in the graph. See GraphEditor.nodeContextMenuSignal() for brief documentation.

0.11.0
------

* GafferUI.Image() constructor now accepts unicode strings.

* Gadget, NodeGadget and StandardNodeGadget may now be derived from in Python.

* NodeGadget.registerNodeGadget() may now be called from Python, passing a callable for the creation function.

* New GafferUI.ImageGadget class allows images to be displayed in zoomable gadget uis.

* GafferUI.StandardNodeGadget can now be customised using a new setContents() method. This allows the central region of the node to be replaced with custom gadgets on a per-node basis. See startup/gui/graphs.py for example code for customising with an icon (note that this is waiting for a PNGImageReader to be available in cortex).

0.10.0
------

* Fixed flickering in the Viewer - enabled double buffering in same way as GraphEditor.

* The view application has been ported from gtk to Qt.

* The Collapsible widget no longer changes width when its collapse state is changed.

* Window.addChildWindow() has been ported from gtk to Qt. This means that dialogues can be made to stay on top of the windows that launch them.

* GafferUI.Dialogue.__init__ now accepts borderWidth and resizeable arguments.

* Collapsible constructor now accepts borderWidth argument.

* MultiLineTextWidget now accepts text argument to constructor.

* OpDialogue now reliably closes itself following execution or cancel. A future version may stay open if userData on the Op requests it.

* All signal connections are now made to Gaffer.WeakMethod objects where appropriate. Updated the Widget documentation to encourage the use of WeakMethod.

* GafferUI.Frame class now accepts a child argument to the constructor, actually uses the borderWidth argument, and Frame.setChild( None ) no longer errors.

* Rationalised Window close behaviour. Added Window.close() method which may be called to request that a window be closed - this is also called when the user clicks the close icon. Window subclasses may override Window._acceptsClose to reject or defer closing. Window.closeSignal() has been renamed to Window.closedSignal() and now is now used purely for notification when a window has closed (the return value from attached slots is irrelevant).

* GafferUI.Frame has a borderStyle argument, defaulting to drawing a rather plain border.

* OpDialogue now reports errors using a new ErrorDialogue class.

* GafferUI.CamelCase has been removed as it was ported into IECore some time ago.

* Fixed bug which prevented GraphComponent::commonAncestor<T>() from compiling.

* Gadgets and Widgets may now have tooltips. Client code can set the tooltip using setToolTip(), and classes may provide default dynamic values by implementing getToolTip() appropriately. Currently the NodeGadget, Nodule and ConnectionGadget implement getToolTip to return information about the Nodes, Plugs and Connections they represent.

* Widgets now have a wheelSignal() for responding to mouse wheel events. The Viewer and GraphEditor use this to implement zooming.

* Fixed bug which prevented Collapsible containers from toggling state correctly when multiple instances shared a parent.

* Node UIs now use a ScrolledContainer for their top level container.

* Label widget now allows the alignment to be specified.

* Fixed alignment issues in NodeUIs.

* OpDialogue has a better default size.

* Added handlers for the following parameter types :

	IECore.V2iParameter
	IECore.V3iParameter
	IECore.V2fParameter
	IECore.V3fParameter
	IECore.Color3fParameter
	IECore.Color4fParameter
	
* Fixed TypeError: invalid argument to sipBadCatcherResult() messages coming from ColorSwatch widget.

0.9.0
-----

* Can now access the internal QPixmap for a GafferUI.Image widget using the _qtPixmap() method. This is to assist in implementing other widget types and should be considered off limits for user code (along with all the other protected _qt* function).

* GafferUI.Button can now display an optional GafferUI.Image in addition to text, and has setText(), getText(), setImage() and getImage() accessors. Note that the label keyword parameter has been renamed to text. The GafferUI.Dialogue._addButton() method now accepts a Button directly (as well as still accepting a string for backwards compatibility) to allow buttons with images to be used in Dialogues.

* GraphEditor flicker should now be fixed (enabled double buffering for GL display).

* Fixed bug which would cause Ops to be executed twice in OpDialogue.waitForResult().

0.8.0
-----

* GafferUI.Image now falls back to using Qt image loading code if no IECore.Reader is available. This provides support for PNG images among others. Also fixed some bugs whereby images would fail to load if a full path wasn't provided - now the GAFFERUI_IMAGE_PATHS are used appropriately.

* OpDialogue can now be used non-modally without waitForResult(). The new OpDialogue.opExecutedSignal() can be used to tell when the op has been executed, and to get the result.

* GafferUI.EventLoop addIdleCallback() and removeIdleCallback() have been ported from the old gtk code to the new Qt code.

* Reworked GafferUI.EventLoop to support embedding of Gaffer in Maya. See documentation in GafferUI/EventLoop.py and apps/gui/gui-1.py for details.

0.7.0
-----

* Can now derive from ScriptNode in python and override acceptsChild etc as expected.

* ScrolledContainer and viewer classes have now been ported to the Qt based GafferUI.

* Added a GafferUI.Image class for displaying images in a widget.

* GafferUI.Menu class now supports checkBox menu items again.

* GafferUI.CheckBox widget now displayed with a tick rather than a blank yellow box.

* CompoundNumericPlugValueWidget has now been ported to the Qt based GafferUI, providing uis for V2f, V3f, V2i and V3i plug types.

* GafferUI.Widget derived classes may now pass a GafferUI.Widget instead of a QtGui.QWidget instance to the base class constructor. This makes it possible to develop a wider variety of custom widgets without resorting to Qt APIs.

0.6.0
-----

* Can now specify whether to use PySide or PyQt for Qt python bindings, using the GAFFERUI_QT_BINDINGS environment variable.

0.5.0
-----

* Added a new OpDialogue class to make it easy to run ops.

* Added a new op application, to allow users to run ops in a gui.

* NodeEditor.registerNodeUI has been moved to NodeUI.registerNodeUI, and a NodeUI.create factory functiona added. This allows NodeUIs to be used in places other than the NodeEditor. 

0.4.0
-----

* Can now derive from GraphComponent in python and override acceptsParent and acceptsChild methods. These methods can also be overridden in other python-derivable classes such as Plug and Node.

* Can now derive from CompoundPlug in python.

0.3.0
-----

* ParameterisedHolders now allow some Parameters to opt out of representation as a Plug by adding a "noHostMapping" user data item with a value of BoolData( True ).

* Can now implement and use ParameterHandlers in python.

* Ctrl-C now correctly kills Gaffer

* Fixed type registration for TypedObjectPlugs.

* Fixed NodeEditor lag when selecting several nodes in the GraphEditor.

* Added a factory mechanism for Nodules, allowing different nodules to be used for different plugs. Used this to implement an ArrayNodule type which allows connections to the children of a CompoundPlug to be managed. The code below can be used to demonstrate this :

	import GafferUI
	GafferUI.Nodule.registerNodule( Gaffer.Node.staticTypeId(), "c", GafferUI.ArrayNodule )

	n = Gaffer.Node()

	n.addChild( Gaffer.CompoundPlug( "c" ) )
	n["c"].addChild( Gaffer.IntPlug( "a" ) )
	n["c"].addChild( Gaffer.IntPlug( "b" ) )
	n["c"].addChild( Gaffer.IntPlug( "c" ) )

	addChild( n )

	n2 = Gaffer.Node()
	n2.addChild( Gaffer.IntPlug( "o", Gaffer.Plug.Direction.Out ) )

	addChild( n2 )

* Fixed bug which caused "RuntimeError: Internal C++ object (PySide.QtGui.QLineEdit) already deleted." messages to be displayed.
