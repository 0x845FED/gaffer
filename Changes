* Fixed layout problems caused by adding larger items into existing rows of a GridLayout.

0.15.0
------

* Added a GridContainer class.

* Fixed bug which meant that connections were temporarily offset from their endpoint if a nodule was added to a node immediately after them being made (as the Group node does).

* Fixed bugs in the GroupNode which meant that compute() was called each time the node was moved in the GraphEditor, and that compute() could error if an input plug contained None.

* Gaffer can now be run embedded in maya versions which use Qt natively.

0.14.0
------

* The parameter userData ["UI"]["visible"] is now supported.

* Fixed failing test GafferTest.ParameterisedHolderTest.testAddAndRemoveParameters. Parameters may now be added or removed within a ParameterisedHolder::ParameterModificationContext.

* Fixed a few stylesheet issues that appeared when running under Gnome.

* Added a GraphComponent::setChild() method - this operates in the same way as the __setitem__ python method. See documentation for the distinction between addChild() and setChild().

* Fixed a bug whereby GraphComponent::getChild( "" ) would return the GraphComponent itself rather than nothing.

* Fixed a bug dealing with parameters changing type within a ParameterisedHolder::ParameterModificationContext.

* GraphComponent::parentChangedSignal() now also provides the previous parent to connected slots in addition to the child argument.

* Fixed a bug where transferring a child from one parent to another would emit parentChangedSignal() twice, once with the child unparented from the old parent, and once with the child reparented to the new parent. Now the signal is only emitted once, omitting the bogus temporary unparenting signal.

* Plugs now automatically disconnect their inputs and outputs when they are removed from their parent.

* Plugs may no longer implement acceptsInput( 0 ) to return false - this was illogical as it prevents the undoing of a connection made by the user.

0.13.0
------

* Fixed a bug whereby a node would be offset from the mouse position when dragging if starting the drag was delayed while other uis (particularly the NodeEditor) were updating.

* Fixed a bug which meant that connections were not correctly represented in the GraphEditor for children of the ArrayNodule.

* The ParameterHandler classes now correctly define the Ptr and ConstPtr member typedefs required for all IECore::RefCounted subclasses.

* The ParameterHandler classes now have a plug() method which returns the plug which was created to represent the parameter().

* The ParameterisedHolder class now exposes the internal ParameterHandler with a parameterHandler() method.

* The CompoundParameterHandler class now provides access to the handlers it uses for child parameters using the childParameterHandler() method.

* The CompoundParameterHandler now has python bindings.

* The Image widget no longer expands to fill space if it is available.

* The Label widget now has setText() and getText() methods.

* The PathWidget class now has a path() method returning the path being displayed.

* The Window.addChildWindow( window ) call now results in the parent window holding a reference to the python object representing the child. This avoids situations whereby the child python object would die but the QWidget representing the child on the C++ side would continue to live. Use Window.removeChild() to remove a child window when you wish to destroy it, or use setVisible( False ) to hide the child until you need it again.

* Fixed bug in PathWidget which meant that the path display would be incorrect until the path changed for the first time.

* PathListingWidget fixes :

	* Error when double clicking an item.
	* Selection was not being cleared when the current path wasn't valid.
	* Path wasn't being set when a leaf item was selected, which meant that hitting Enter in the PathChooserDialogue chose the wrong path.
	* Double clicking a directory when the current path wasn't valid created another invalid path, rather than replacing the invalid section.	

* Added a "python" application which simply executes a python file in the Gaffer environment.

* Added a GafferUI._Variant class which has helper function for dealing with differences in PySide and PyQt4 with respect to QVariant handling.

* Fixed VectorDataWidget to work with PySide.

* Added a BoxParameterHandler covering Box2i, Box2f, Box3i and Box3f parameter types.

* GraphComponent now supports the len() function in python, returning the number of children for the instance. The __nonzero__ method is also implemented so that queries of the type "if graphComponent : " will return True as before, even if there are no children.

* The sizing behaviour of the PathListingWidget is no longer quite as annoying.

* GafferUI.Menu now optionally passes a "menu" argument to the checkBox callback of a menu item, in the same way as it does for the command callback.

* Fixed bug in GafferUI.ColorSwatch.getColor().

* Added Window.[gs]etFullScreen() methods, and added a menu item to the Layout menu to use them. Added a parentWindow argument to the Dialogue*.waitFor*() methods, and used it appropriately to keep dialogues on top even when in full screen mode.

* The Image class now uses the Cortex PNGImageReader for loading png files, and correctly converts linear data to sRGB for display.

* Added a basic framework for parameter-specific uis. Initially there are only specific uis for compound parameters, presets only parameters and path parameters - all others fall back to using the default plug widgets. A UI may be easily instantiated for all the parameters of a ParameterisedHolderNode using the GafferUI.CompoundParameterValueWidget - see GafferUI.ParameterisedHolderNodeUI for an example.

* The MultiLineTextWidget now has much more sensible tab spacing.

* The Collapsible container can now display an optional widget in the top right corner of the header. Use the setCornerWidget() and getCornerWidget() methods to manipulate this widget.

* Removed font parameter from GafferUI.Label - it wasn't doing anything anyway. Font control will likely return in the form of some support for text markup.

* Fixed variable scope issues which meant that the following code would fail if executed in a script editor :

		class A() :

			def __init__( self ) :

				print A

		a = A()

0.12.0
------

* Added a VectorDataWidget and a VectorDataPlugValueWidget, handling plugs of type StringVectorPlug, IntVectorPlug, FloatVectorPlug and V3fVectorPlug. Still needs file selector support.

* Added a V3fVectorDataPlug and a V3fVectorDataParameter handler.

* All gaffer applications now include a call to IECore.registerRunTimeTyped.

* Fixed bug which would cause the base class doRender() method to be called in addition to the overridden one when subclassing from Gadget in python.

* Plug::setInput() now calls acceptsInput() even when the new input is null. This allows plugs to reject the removal of existing connections. The connection gadget has been updated to respect the new rejection possibility, preventing the dragging of the destination end of a connection to a plug whose acceptsInput( 0 ) returns false, and not attempting to set the input if the source end of source a connection is dragged off into space. Currently no Gaffer plug type returns false from acceptsInput( 0 ), but custom plugs are free to do so and Gaffer plugs may return false in the future based on the content of a ReadOnly or Locked flag on the plug.

* Window constructor now accepts an additional "child" keyword argument which is passed to a call to setChild().

* Fixed problem whereby the hover colour for the SplitContainer handles wouldn't work on all platforms.

* The GraphEditor now provides access to its internal GraphGadget with the graphGadget() method.

* Refactored the Set class into an abstract base class and a StandardSet class containing the previous functionality. The members() and sequencedMembers() methods have been removed as they didn't generalise well to other potential Set subclasses (such as a NameFilteredSet). Instead a new member( i ) method provides ordered access and the contains( member ) method provides membership queries.

* Added a ChildSet class whose membership tracks the children of a given GraphComponent.

* Added python bindings for Nodule::plug and Connection::srcNodule() and Connection::dstNodule().

* Added CompoundEditor.editors() method, which returns all the child editors, optionally filtered by type.

* GraphGadget can now show arbitrary Sets of nodes, specified using the GraphGadget::setGraphSet() method.

* GafferBindings::SignalBinder now supports signals of arity 0.

* GafferBindings::SignalBinder now returns the class that was bound, so that additional method bindings may be added by calling code.

* A generic set of python signals are now bound as Signal0, Signal1, Signal2 and Signal3, where the number denotes the number of arguments the Signal takes. Python callables may be used to provide custom result combiners - see GafferTest.SignalsTest for examples.

* The GraphEditor now allows custom right click menus to be displayed for nodes in the graph. See GraphEditor.nodeContextMenuSignal() for brief documentation.

0.11.0
------

* GafferUI.Image() constructor now accepts unicode strings.

* Gadget, NodeGadget and StandardNodeGadget may now be derived from in Python.

* NodeGadget.registerNodeGadget() may now be called from Python, passing a callable for the creation function.

* New GafferUI.ImageGadget class allows images to be displayed in zoomable gadget uis.

* GafferUI.StandardNodeGadget can now be customised using a new setContents() method. This allows the central region of the node to be replaced with custom gadgets on a per-node basis. See startup/gui/graphs.py for example code for customising with an icon (note that this is waiting for a PNGImageReader to be available in cortex).

0.10.0
------

* Fixed flickering in the Viewer - enabled double buffering in same way as GraphEditor.

* The view application has been ported from gtk to Qt.

* The Collapsible widget no longer changes width when its collapse state is changed.

* Window.addChildWindow() has been ported from gtk to Qt. This means that dialogues can be made to stay on top of the windows that launch them.

* GafferUI.Dialogue.__init__ now accepts borderWidth and resizeable arguments.

* Collapsible constructor now accepts borderWidth argument.

* MultiLineTextWidget now accepts text argument to constructor.

* OpDialogue now reliably closes itself following execution or cancel. A future version may stay open if userData on the Op requests it.

* All signal connections are now made to Gaffer.WeakMethod objects where appropriate. Updated the Widget documentation to encourage the use of WeakMethod.

* GafferUI.Frame class now accepts a child argument to the constructor, actually uses the borderWidth argument, and Frame.setChild( None ) no longer errors.

* Rationalised Window close behaviour. Added Window.close() method which may be called to request that a window be closed - this is also called when the user clicks the close icon. Window subclasses may override Window._acceptsClose to reject or defer closing. Window.closeSignal() has been renamed to Window.closedSignal() and now is now used purely for notification when a window has closed (the return value from attached slots is irrelevant).

* GafferUI.Frame has a borderStyle argument, defaulting to drawing a rather plain border.

* OpDialogue now reports errors using a new ErrorDialogue class.

* GafferUI.CamelCase has been removed as it was ported into IECore some time ago.

* Fixed bug which prevented GraphComponent::commonAncestor<T>() from compiling.

* Gadgets and Widgets may now have tooltips. Client code can set the tooltip using setToolTip(), and classes may provide default dynamic values by implementing getToolTip() appropriately. Currently the NodeGadget, Nodule and ConnectionGadget implement getToolTip to return information about the Nodes, Plugs and Connections they represent.

* Widgets now have a wheelSignal() for responding to mouse wheel events. The Viewer and GraphEditor use this to implement zooming.

* Fixed bug which prevented Collapsible containers from toggling state correctly when multiple instances shared a parent.

* Node UIs now use a ScrolledContainer for their top level container.

* Label widget now allows the alignment to be specified.

* Fixed alignment issues in NodeUIs.

* OpDialogue has a better default size.

* Added handlers for the following parameter types :

	IECore.V2iParameter
	IECore.V3iParameter
	IECore.V2fParameter
	IECore.V3fParameter
	IECore.Color3fParameter
	IECore.Color4fParameter
	
* Fixed TypeError: invalid argument to sipBadCatcherResult() messages coming from ColorSwatch widget.

0.9.0
-----

* Can now access the internal QPixmap for a GafferUI.Image widget using the _qtPixmap() method. This is to assist in implementing other widget types and should be considered off limits for user code (along with all the other protected _qt* function).

* GafferUI.Button can now display an optional GafferUI.Image in addition to text, and has setText(), getText(), setImage() and getImage() accessors. Note that the label keyword parameter has been renamed to text. The GafferUI.Dialogue._addButton() method now accepts a Button directly (as well as still accepting a string for backwards compatibility) to allow buttons with images to be used in Dialogues.

* GraphEditor flicker should now be fixed (enabled double buffering for GL display).

* Fixed bug which would cause Ops to be executed twice in OpDialogue.waitForResult().

0.8.0
-----

* GafferUI.Image now falls back to using Qt image loading code if no IECore.Reader is available. This provides support for PNG images among others. Also fixed some bugs whereby images would fail to load if a full path wasn't provided - now the GAFFERUI_IMAGE_PATHS are used appropriately.

* OpDialogue can now be used non-modally without waitForResult(). The new OpDialogue.opExecutedSignal() can be used to tell when the op has been executed, and to get the result.

* GafferUI.EventLoop addIdleCallback() and removeIdleCallback() have been ported from the old gtk code to the new Qt code.

* Reworked GafferUI.EventLoop to support embedding of Gaffer in Maya. See documentation in GafferUI/EventLoop.py and apps/gui/gui-1.py for details.

0.7.0
-----

* Can now derive from ScriptNode in python and override acceptsChild etc as expected.

* ScrolledContainer and viewer classes have now been ported to the Qt based GafferUI.

* Added a GafferUI.Image class for displaying images in a widget.

* GafferUI.Menu class now supports checkBox menu items again.

* GafferUI.CheckBox widget now displayed with a tick rather than a blank yellow box.

* CompoundNumericPlugValueWidget has now been ported to the Qt based GafferUI, providing uis for V2f, V3f, V2i and V3i plug types.

* GafferUI.Widget derived classes may now pass a GafferUI.Widget instead of a QtGui.QWidget instance to the base class constructor. This makes it possible to develop a wider variety of custom widgets without resorting to Qt APIs.

0.6.0
-----

* Can now specify whether to use PySide or PyQt for Qt python bindings, using the GAFFERUI_QT_BINDINGS environment variable.

0.5.0
-----

* Added a new OpDialogue class to make it easy to run ops.

* Added a new op application, to allow users to run ops in a gui.

* NodeEditor.registerNodeUI has been moved to NodeUI.registerNodeUI, and a NodeUI.create factory functiona added. This allows NodeUIs to be used in places other than the NodeEditor. 

0.4.0
-----

* Can now derive from GraphComponent in python and override acceptsParent and acceptsChild methods. These methods can also be overridden in other python-derivable classes such as Plug and Node.

* Can now derive from CompoundPlug in python.

0.3.0
-----

* ParameterisedHolders now allow some Parameters to opt out of representation as a Plug by adding a "noHostMapping" user data item with a value of BoolData( True ).

* Can now implement and use ParameterHandlers in python.

* Ctrl-C now correctly kills Gaffer

* Fixed type registration for TypedObjectPlugs.

* Fixed NodeEditor lag when selecting several nodes in the GraphEditor.

* Added a factory mechanism for Nodules, allowing different nodules to be used for different plugs. Used this to implement an ArrayNodule type which allows connections to the children of a CompoundPlug to be managed. The code below can be used to demonstrate this :

	import GafferUI
	GafferUI.Nodule.registerNodule( Gaffer.Node.staticTypeId(), "c", GafferUI.ArrayNodule )

	n = Gaffer.Node()

	n.addChild( Gaffer.CompoundPlug( "c" ) )
	n["c"].addChild( Gaffer.IntPlug( "a" ) )
	n["c"].addChild( Gaffer.IntPlug( "b" ) )
	n["c"].addChild( Gaffer.IntPlug( "c" ) )

	addChild( n )

	n2 = Gaffer.Node()
	n2.addChild( Gaffer.IntPlug( "o", Gaffer.Plug.Direction.Out ) )

	addChild( n2 )

* Fixed bug which caused "RuntimeError: Internal C++ object (PySide.QtGui.QLineEdit) already deleted." messages to be displayed.
